generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String
  surname          String?
  email            String            @unique
  phone            String?
  password         String?
  emailVerified    DateTime?
  image            String?
  role             Role              @default(user)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  payments         Payment[]
  purchasedPackages PurchasedPackage[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model Payment {
  id                 String           @id @default(cuid())
  paymentId          String           @unique     
  dateCreated        DateTime
  dateLastUpdated    DateTime
  moneyReleaseDate   DateTime?
  description        String?
  total              Float
  status             String
  statusDetail       String?
  paymentTypeId      String
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  purchasedPackage   PurchasedPackage?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model ClassPackage {
  id            String            @id @default(cuid())
  name          String
  description   String?
  classCount    Int
  price         Float
  durationMonths  Int
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  purchasedPackages PurchasedPackage[]
}

model PurchasedPackage {
  id               String       @id @default(cuid())
  userId           String
  classPackageId   String
  remainingClasses Int
  expirationDate   DateTime
  status           PackageStatus @default(active)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id])
  classPackage     ClassPackage @relation(fields: [classPackageId], references: [id])
  payment          Payment?     @relation(fields: [paymentId], references: [id])
  paymentId        String?      @unique
}

enum Role {
  user
  admin
}

enum PackageStatus {
  active
  expired
  cancelled
}